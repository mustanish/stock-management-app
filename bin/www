const http = require('http');
const app = require('../app');
const config = require('../src/configs/env');
const { logger } = require('../src/utils');

const env = process.env.NODE_ENV || 'development';
global.config = config[env];

/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
  const value = parseInt(val, 10);

  if (Number.isNaN(value)) return val; // named pipe

  if (value >= 0) return value; // port number

  return false;
};

/**
 * Get port from environment config and store in Express.
 */
const port = normalizePort(global.config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `pipe ${addr.port}`;
  logger.info(`Listening on ${bind} in ${app.get('env')} environment`);
};

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
